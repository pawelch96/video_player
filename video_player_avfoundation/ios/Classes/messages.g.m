// Autogenerated from Pigeon (v2.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.g.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface TextureMessage ()
+ (TextureMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface LoopingMessage ()
+ (LoopingMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface VolumeMessage ()
+ (VolumeMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PlaybackSpeedMessage ()
+ (PlaybackSpeedMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PositionMessage ()
+ (PositionMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface CreateMessage ()
+ (CreateMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface MixWithOthersMessage ()
+ (MixWithOthersMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PiPMessage ()
+ (PiPMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation TextureMessage
+ (instancetype)makeWithTextureId:(nullable NSNumber *)textureId {
  TextureMessage* pigeonResult = [[TextureMessage alloc] init];
  pigeonResult.textureId = textureId;
  return pigeonResult;
}
+ (TextureMessage *)fromMap:(NSDictionary *)dict {
  TextureMessage *pigeonResult = [[TextureMessage alloc] init];
  pigeonResult.textureId = GetNullableObject(dict, @"textureId");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", nil];
}
@end

@implementation LoopingMessage
+ (instancetype)makeWithTextureId:(nullable NSNumber *)textureId
    isLooping:(nullable NSNumber *)isLooping {
  LoopingMessage* pigeonResult = [[LoopingMessage alloc] init];
  pigeonResult.textureId = textureId;
  pigeonResult.isLooping = isLooping;
  return pigeonResult;
}
+ (LoopingMessage *)fromMap:(NSDictionary *)dict {
  LoopingMessage *pigeonResult = [[LoopingMessage alloc] init];
  pigeonResult.textureId = GetNullableObject(dict, @"textureId");
  pigeonResult.isLooping = GetNullableObject(dict, @"isLooping");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.isLooping ? self.isLooping : [NSNull null]), @"isLooping", nil];
}
@end

@implementation VolumeMessage
+ (instancetype)makeWithTextureId:(nullable NSNumber *)textureId
    volume:(nullable NSNumber *)volume {
  VolumeMessage* pigeonResult = [[VolumeMessage alloc] init];
  pigeonResult.textureId = textureId;
  pigeonResult.volume = volume;
  return pigeonResult;
}
+ (VolumeMessage *)fromMap:(NSDictionary *)dict {
  VolumeMessage *pigeonResult = [[VolumeMessage alloc] init];
  pigeonResult.textureId = GetNullableObject(dict, @"textureId");
  pigeonResult.volume = GetNullableObject(dict, @"volume");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation PlaybackSpeedMessage
+ (instancetype)makeWithTextureId:(nullable NSNumber *)textureId
    speed:(nullable NSNumber *)speed {
  PlaybackSpeedMessage* pigeonResult = [[PlaybackSpeedMessage alloc] init];
  pigeonResult.textureId = textureId;
  pigeonResult.speed = speed;
  return pigeonResult;
}
+ (PlaybackSpeedMessage *)fromMap:(NSDictionary *)dict {
  PlaybackSpeedMessage *pigeonResult = [[PlaybackSpeedMessage alloc] init];
  pigeonResult.textureId = GetNullableObject(dict, @"textureId");
  pigeonResult.speed = GetNullableObject(dict, @"speed");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.speed ? self.speed : [NSNull null]), @"speed", nil];
}
@end

@implementation PositionMessage
+ (instancetype)makeWithTextureId:(nullable NSNumber *)textureId
    position:(nullable NSNumber *)position {
  PositionMessage* pigeonResult = [[PositionMessage alloc] init];
  pigeonResult.textureId = textureId;
  pigeonResult.position = position;
  return pigeonResult;
}
+ (PositionMessage *)fromMap:(NSDictionary *)dict {
  PositionMessage *pigeonResult = [[PositionMessage alloc] init];
  pigeonResult.textureId = GetNullableObject(dict, @"textureId");
  pigeonResult.position = GetNullableObject(dict, @"position");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.position ? self.position : [NSNull null]), @"position", nil];
}
@end

@implementation CreateMessage
+ (instancetype)makeWithAsset:(nullable NSString *)asset
    uri:(nullable NSString *)uri
    packageName:(nullable NSString *)packageName
    formatHint:(nullable NSString *)formatHint
    httpHeaders:(nullable NSDictionary<NSString *, NSString *> *)httpHeaders {
  CreateMessage* pigeonResult = [[CreateMessage alloc] init];
  pigeonResult.asset = asset;
  pigeonResult.uri = uri;
  pigeonResult.packageName = packageName;
  pigeonResult.formatHint = formatHint;
  pigeonResult.httpHeaders = httpHeaders;
  return pigeonResult;
}
+ (CreateMessage *)fromMap:(NSDictionary *)dict {
  CreateMessage *pigeonResult = [[CreateMessage alloc] init];
  pigeonResult.asset = GetNullableObject(dict, @"asset");
  pigeonResult.uri = GetNullableObject(dict, @"uri");
  pigeonResult.packageName = GetNullableObject(dict, @"packageName");
  pigeonResult.formatHint = GetNullableObject(dict, @"formatHint");
  pigeonResult.httpHeaders = GetNullableObject(dict, @"httpHeaders");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.asset ? self.asset : [NSNull null]), @"asset", (self.uri ? self.uri : [NSNull null]), @"uri", (self.packageName ? self.packageName : [NSNull null]), @"packageName", (self.formatHint ? self.formatHint : [NSNull null]), @"formatHint", (self.httpHeaders ? self.httpHeaders : [NSNull null]), @"httpHeaders", nil];
}
@end

@implementation MixWithOthersMessage
+ (instancetype)makeWithMixWithOthers:(nullable NSNumber *)mixWithOthers {
  MixWithOthersMessage* pigeonResult = [[MixWithOthersMessage alloc] init];
  pigeonResult.mixWithOthers = mixWithOthers;
  return pigeonResult;
}
+ (MixWithOthersMessage *)fromMap:(NSDictionary *)dict {
  MixWithOthersMessage *pigeonResult = [[MixWithOthersMessage alloc] init];
  pigeonResult.mixWithOthers = GetNullableObject(dict, @"mixWithOthers");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.mixWithOthers ? self.mixWithOthers : [NSNull null]), @"mixWithOthers", nil];
}
@end

@implementation PiPMessage
+ (instancetype)makeWithTextureId:(nullable NSNumber *)textureId
    top:(nullable NSNumber *)top
    left:(nullable NSNumber *)left
    width:(nullable NSNumber *)width
    height:(nullable NSNumber *)height {
  PiPMessage* pigeonResult = [[PiPMessage alloc] init];
  pigeonResult.textureId = textureId;
  pigeonResult.top = top;
  pigeonResult.left = left;
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (PiPMessage *)fromMap:(NSDictionary *)dict {
  PiPMessage *pigeonResult = [[PiPMessage alloc] init];
  pigeonResult.textureId = GetNullableObject(dict, @"textureId");
  pigeonResult.top = GetNullableObject(dict, @"top");
  pigeonResult.left = GetNullableObject(dict, @"left");
  pigeonResult.width = GetNullableObject(dict, @"width");
  pigeonResult.height = GetNullableObject(dict, @"height");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.top ? self.top : [NSNull null]), @"top", (self.left ? self.left : [NSNull null]), @"left", (self.width ? self.width : [NSNull null]), @"width", (self.height ? self.height : [NSNull null]), @"height", nil];
}
@end

@interface VideoPlayerApiCodecReader : FlutterStandardReader
@end
@implementation VideoPlayerApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [CreateMessage fromMap:[self readValue]];
    
    case 129:     
      return [LoopingMessage fromMap:[self readValue]];
    
    case 130:     
      return [MixWithOthersMessage fromMap:[self readValue]];
    
    case 131:     
      return [PiPMessage fromMap:[self readValue]];
    
    case 132:     
      return [PlaybackSpeedMessage fromMap:[self readValue]];
    
    case 133:     
      return [PositionMessage fromMap:[self readValue]];
    
    case 134:     
      return [TextureMessage fromMap:[self readValue]];
    
    case 135:     
      return [VolumeMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface VideoPlayerApiCodecWriter : FlutterStandardWriter
@end
@implementation VideoPlayerApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[CreateMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[LoopingMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[MixWithOthersMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PiPMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PlaybackSpeedMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PositionMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TextureMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VolumeMessage class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface VideoPlayerApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation VideoPlayerApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[VideoPlayerApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[VideoPlayerApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *VideoPlayerApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    VideoPlayerApiCodecReaderWriter *readerWriter = [[VideoPlayerApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void VideoPlayerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<VideoPlayerApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.initialize"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeWithError:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(initializeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initializeWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.create"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(createMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        CreateMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        TextureMessage *output = [api createMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.dispose"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposeMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(disposeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TextureMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disposeMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.setLooping"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLoopingMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(setLoopingMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        LoopingMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLoopingMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.setVolume"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVolumeMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(setVolumeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VolumeMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setVolumeMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.setPlaybackSpeed"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPlaybackSpeedMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(setPlaybackSpeedMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PlaybackSpeedMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setPlaybackSpeedMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.play"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(playMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(playMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TextureMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api playMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.position"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(positionMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(positionMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TextureMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        PositionMessage *output = [api positionMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.seekTo"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(seekToMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(seekToMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PositionMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api seekToMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.pause"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(pauseMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TextureMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pauseMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.setMixWithOthers"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMixWithOthersMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(setMixWithOthersMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        MixWithOthersMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setMixWithOthersMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.enablePictureInPicture"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enablePictureInPictureMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(enablePictureInPictureMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PiPMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api enablePictureInPictureMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.isPictureInPictureEnabled"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isPictureInPictureEnabledMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(isPictureInPictureEnabledMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TextureMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api isPictureInPictureEnabledMsg:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPlayerApi.disablePictureInPicture"
        binaryMessenger:binaryMessenger
        codec:VideoPlayerApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disablePictureInPictureMsg:error:)], @"VideoPlayerApi api (%@) doesn't respond to @selector(disablePictureInPictureMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TextureMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disablePictureInPictureMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
